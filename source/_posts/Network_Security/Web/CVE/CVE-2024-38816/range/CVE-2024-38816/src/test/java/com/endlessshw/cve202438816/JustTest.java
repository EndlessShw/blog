package com.endlessshw.cve202438816;

import org.junit.jupiter.api.Test;
import org.springframework.core.io.FileSystemResource;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * @author hasee
 * @version 1.0
 * @description: 就是普普通通的测试类
 * @date 2024/11/18 13:44
 */
public class JustTest {

    @Test
    public void testFile() throws IOException {
        FileSystemResource fileSystemResource = new FileSystemResource("E://1.txt");
        if (fileSystemResource.getFile().exists()) {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(fileSystemResource.getInputStream()));
            StringBuilder content = new StringBuilder();
            String lineContent = "";
            while ((lineContent = bufferedReader.readLine()) != null) {
                content.append(lineContent);
            }
            System.out.println("content is " + content);
            bufferedReader.close();
        } else {
            System.out.println("文件不存在");
        }
    }

    @Test
    public void testPathProcess() {
        System.out.println(processPath("//xxx/xxx"));
    }

    // @Test
    // public void testContain() {
    //     System.out.println("\/\/\/\/\/\/\/\/\/\/\/\/\/../../../../../../../../../../../../../".contains("../"));
    // }

    private String processPath(String path) {
        // 判断当前的字符是否是 `/`
        boolean slash = false;
        // 外层遍历路径中的每个元素
        for (int i = 0; i < path.length(); i++) {
            if (path.charAt(i) == '/') {
                slash = true;
            }
            // ascii 32 后面，但是不能为 del，也就是找到有效字符
            else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {
                if (i == 0 || (i == 1 && slash)) {
                    return path;
                }
                // xxx/xxx
                path = slash ? "/" + path.substring(i) : path.substring(i);
                return path;
            }
        }
        return (slash ? "/" : "");
    }
}
